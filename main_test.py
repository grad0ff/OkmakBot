import telebot, time, logging
from telebot import types

bot = telebot.TeleBot("1825854132:AAFn3pRQ7yhRemHc5cSsG_e3MohAyC9lQyA")


class ShoppingList:
    COUNT = 0
    __PRODUCTS = {'A', 'B', 'C', 'D', 'E', 'F'}

    def __init__(self):
        self.shoplist = set()
        self.not_added_list = ShoppingList.__PRODUCTS
        ShoppingList.COUNT += 1

    def add_to_shoplist(self, item):
        self.shoplist.add(item)
        self.not_added_list = ShoppingList.__PRODUCTS.difference(self.shoplist)
        print('–í —Å–ø–∏—Å–∫–µ: ', self.shoplist)
        print('–ù–µ –≤ —Å–ø–∏—Å–∫–µ: ', self.not_added_list)

    def del_from_shoplist(self, item):
        self.shoplist.remove(item)
        self.not_added_list = ShoppingList.__PRODUCTS.difference(self.shoplist)
        print('–£–¥–∞–ª–µ–Ω–æ: ', item)

    def add_new_item(self, new_item):
        ShoppingList.__PRODUCTS.add(new_item)

    def delete_item(self, item):
        ShoppingList.__PRODUCTS.remove(item)

    def get_all_items(self):
        return ShoppingList.__PRODUCTS


shopping_list = ShoppingList()


# –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup()
    markup.row('–ö—É–ø–∏—Ç—å', '–°–ø–∏—Å–æ–∫')
    markup.row('–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫')

    bot.send_message(message.chat.id, '–°–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!', reply_markup=markup)


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
@bot.message_handler(regexp='–°–ø–∏—Å–æ–∫')
def get_shopping_list(message):
    if shopping_list.shoplist:
        markup = types.InlineKeyboardMarkup()
        markup.row(*display_btns(shopping_list.shoplist))
        bot.send_message(message.chat.id, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç! üòÅ')


# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫
@bot.message_handler(regexp='–ö—É–ø–∏—Ç—å')
def to_buy(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(*display_btns(shopping_list.not_added_list))
    button_new = types.InlineKeyboardButton('–ù–æ–≤–æ–µ', callback_data='new_item')
    markup.row(button_new)
    bot.send_message(message.chat.id, '–ß—Ç–æ –∂–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å? ü§î', reply_markup=markup)


# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
@bot.message_handler(regexp='–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫')
def show_all_list(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(*display_btns(shopping_list.get_all_items()))
    bot.send_message(message.chat.id, '–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã:', reply_markup=markup)


# –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.callback_query_handler(func=lambda call: True)
def handle(call):
    if call.data == 'new_item':
        print('new_item')
        bot.send_message(call.message.chat.id, f'–ß—Ç–æ –≤–Ω–æ—Å–∏–º?')


        # new_item = bot.
        # shopping_list.add_new_item(new_item)
        # bot.answer_callback_query(callback_query_id= call.id, text=f'–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä–µ—á–µ–Ω—å:   {str(call.data)}')

    elif call.data not in shopping_list.shoplist:
        shopping_list.add_to_shoplist(call.data)
        bot.answer_callback_query(callback_query_id= call.id, text=f'–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫:   {str(call.data)}')
        # time.sleep(2)
        to_buy(call.message)
    elif call.data in shopping_list.shoplist:
        shopping_list.del_from_shoplist(call.data)
        bot.answer_callback_query(callback_query_id= call.id, text=f'–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞:   {str(call.data)}')
        # time.sleep(2)
        get_shopping_list(call.message)
    if call.data in shopping_list.get_all_items():
        shopping_list.delete_item(call.data)
        print(shopping_list.get_all_items())
    bot.answer_callback_query(call.id)


# –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
def display_btns(list_type):
    btn_list = []
    for item in sorted(list_type):
        button_item = types.InlineKeyboardButton(item, callback_data=item)
        btn_list.append(button_item)
    return btn_list


bot.polling()
