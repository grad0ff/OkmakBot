from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

from config import okmakbot_token
from shoping import ShoppingList

import pickle

shopping_list = ShoppingList()

bot = Bot(token=okmakbot_token)
dp = Dispatcher(bot)

button_new = KeyboardButton('*–ù–û–í–û–ï*', callback_data='new_item')
button_back = KeyboardButton('*–ù–ê–ó–ê–î*', callback_data='go_back')
button_del = KeyboardButton('*–£–î–ê–õ–ò–¢–¨*', callback_data='del_item')
func_buttons = [button_new, button_back, button_del]


# –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç
@dp.message_handler(commands='start')
@dp.message_handler(regexp='–ù–∞–∑–∞–¥')
async def start(message: types.Message):
    button_1 = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫')
    button_2 = KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫')
    button_4 = KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏')
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(button_1, button_2)
    markup.add(button_4)
    if message.text == '–ù–∞–∑–∞–¥':
        await message.answer('–ß—Ç–æ –¥–∞–ª—å—à–µ? üòè', reply_markup=markup)
    else:
        await message.answer('–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤! üëç', reply_markup=markup)


# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫
@dp.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫')
async def add_to_list(message: types.Message):
    if shopping_list.not_added_list:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(*display_btns(shopping_list.not_added_list, 'ATL'))
        markup.add(button_new, button_del)
        await message.answer('–ß—Ç–æ –∂–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å? ü§î', reply_markup=markup)
    else:
        await message.answer('–ë–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å... üò±')


@dp.callback_query_handler(Text(startswith='ATL'))
async def atl(call: types.CallbackQuery):
    print('ATL')
    shopping_list.add_to_shoplist(call.data[3:])
    await add_to_list(call.message)
    await call.answer()


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
@dp.message_handler(regexp='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫')
async def get_shopping_list(message: types.Message):
    if shopping_list.shoplist:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(*(display_btns(shopping_list.shoplist, 'GSL')))
        markup.add(button_new, button_del)
        await message.answer('–í–æ—Ç —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫: üòâ', reply_markup=markup)
    else:
        await message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç! üòÅ')


@dp.callback_query_handler(Text(startswith='GSL'))
async def gsl(call: types.CallbackQuery):
    print('GSL')
    shopping_list.del_from_shoplist(call.data[3:])
    await get_shopping_list(call.message)
    await call.answer()


# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
@dp.message_handler(regexp='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏')
async def show_all_list(message):
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(*display_btns(shopping_list.get_all_items(), 'SAL'))
    markup.add(button_del)
    await message.answer('–í–æ—Ç —Ç–µ–±–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏! üòé', reply_markup=markup)


@dp.callback_query_handler(Text(startswith='SAL'))
async def gsl(call: types.CallbackQuery):
    print('SAL')
    await call.answer()


@dp.callback_query_handler(Text(startswith='del_item'))
async def del_item_forever(call: types.CallbackQuery):
    markup = InlineKeyboardMarkup()
    markup.add(*display_btns(shopping_list.get_all_items(), 'DIF'))
    markup.add(button_back)
    await call.message.answer('–ß—Ç–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å? üò≥', reply_markup=markup)
    await call.answer()


@dp.callback_query_handler(Text(startswith='DIF'))
async def dif(call: types.CallbackQuery):
    print('DIF')
    shopping_list.delete_item(call.data[3:])
    await del_item_forever(call)
    print(call.data[3:])
    await call.answer()


# –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫
@dp.callback_query_handler(Text(startswith='new_item'))
async def add_new_item(call: types.CallbackQuery):
    print('*–ù–û–í–û–ï*')
    await call.message.answer('–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏... üëá')
    await call.answer()


@dp.message_handler()
async def ani(message: types.Message):
    if message.text not in shopping_list.get_all_items():
        shopping_list.add_new_item(message.text)
        await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ:  {message.text}')
    else:
        await message.answer(f'–ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è! ‚òùÔ∏è')


# –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
def display_btns(set_type, prefix):
    btn_list = []
    for item in sorted(set_type):
        button_item = InlineKeyboardButton(item, callback_data=prefix + item)
        btn_list.append(button_item)
    return btn_list


with open('items.db', 'wb') as db:
    pickle.dump({'all': shopping_list.get_all_items(), 'list': shopping_list.shoplist,
                 'not_added': shopping_list.not_added_list}, db)

# with open('items.db', 'rb') as db:
#     pickle.
executor.start_polling(dp)
