from aiogram import Bot, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from config import okmakbot_token

from shoping import ShoppingList

shopping_list = ShoppingList()

bot = Bot(token=okmakbot_token)
dp = Dispatcher(bot)

three_buttons = [KeyboardButton('–ù–æ–≤–æ–µ', callback_data='new_item'),
                 KeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_adding'),
                 KeyboardButton('–£–¥–∞–ª–∏—Ç—å', callback_data='del_item')]


# –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç
@dp.message_handler(commands='start')
@dp.message_handler(regexp='–ù–∞–∑–∞–¥')
async def start(message: types.Message):
    button_1 = KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫')
    button_2 = KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫')
    button_4 = KeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏')
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(button_1, button_2)
    markup.add(button_4)
    await message.answer('–í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤! üëç', reply_markup=markup)


# –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ —Å–ø–∏—Å–æ–∫
@dp.message_handler(regexp='–î–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫')
async def add_to_list(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*display_btns(shopping_list.not_added_list))
    markup.add(*three_buttons)
    await message.answer('–ß—Ç–æ –∂–µ –Ω—É–∂–Ω–æ –∫—É–ø–∏—Ç—å? ü§î', reply_markup=markup)


# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
@dp.message_handler(regexp='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫')
async def get_shopping_list(message: types.Message):
    if shopping_list.shoplist:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*display_btns(shopping_list.shoplist))
        markup.add(*three_buttons)
        await message.answer('–í–æ—Ç —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫: üòâ', reply_markup=markup)
    else:
        await message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç! üòÅ')


# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
@dp.message_handler(regexp='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏')
async def show_all_list(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*display_btns(shopping_list.get_all_items()))
    markup.add(*three_buttons)
    await message.answer('–í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã:', reply_markup=markup)


# –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
def display_btns(list_type):
    btn_list = []
    for item in sorted(list_type):
        button_item = types.InlineKeyboardButton(item, callback_data=item)
        btn_list.append(button_item)
    return btn_list


@dp.message_handler(regexp='–ù–æ–≤–æ–µ')
async def add_new_item(message: types.Message):
    pass


@dp.message_handler(regexp='–£–¥–∞–ª–∏—Ç—å')
async def del_item(message: types.Message):
    ReplyKeyboardRemove()
    markup = InlineKeyboardMarkup()
    markup.add(*display_btns(shopping_list.get_all_items()))
    markup.add(three_buttons[1])
    await message.answer('–ß—Ç–æ –±—É–¥–µ–º —É–¥–∞–ª—è—Ç—å? üò≥', reply_markup=ReplyKeyboardRemove(selective=True)
)


@dp.callback_query_handler(add_to_list)
async def test():
    print('call')


executor.start_polling(dp)
